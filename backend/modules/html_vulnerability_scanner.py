import requests
from bs4 import BeautifulSoup
import logging

logger = logging.getLogger(__name__)

class HTMLVulnerabilityScanner:
    def scan(self, url):
        """
        Scan the HTML of a website for OWASP Top 10 vulnerabilities.
        """
        vulnerabilities = []

        try:
            response = requests.get(url, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')

            # Check for common OWASP vulnerabilities
            vulnerabilities.extend(self._check_xss(soup))
            vulnerabilities.extend(self._check_csrf(soup))
            vulnerabilities.extend(self._check_insecure_forms(soup))
            vulnerabilities.extend(self._check_mixed_content(soup, url))

        except Exception as e:
            logger.error(f"Error during HTML vulnerability scan: {e}")
            vulnerabilities.append({
                'title': 'Scan Error',
                'description': str(e),
                'risk_level': 'High'
            })

        return vulnerabilities

    def _check_xss(self, soup):
        """
        Check for potential XSS vulnerabilities.
        """
        vulnerabilities = []
        scripts = soup.find_all('script')
        for script in scripts:
            if not script.get('src') and script.string:
                vulnerabilities.append({
                    'title': 'Potential XSS Vulnerability',
                    'description': 'Inline JavaScript found in the HTML. This could be vulnerable to XSS attacks.',
                    'risk_level': 'High'
                })
                break
        return vulnerabilities

    def _check_csrf(self, soup):
        """
        Check for missing CSRF tokens in forms.
        """
        vulnerabilities = []
        forms = soup.find_all('form')
        for form in forms:
            if not form.find('input', {'name': 'csrf_token'}):
                vulnerabilities.append({
                    'title': 'Missing CSRF Token',
                    'description': 'Form is missing a CSRF token, making it vulnerable to CSRF attacks.',
                    'risk_level': 'Medium'
                })
        return vulnerabilities

    def _check_insecure_forms(self, soup):
        """
        Check for insecure forms (e.g., forms submitting over HTTP).
        """
        vulnerabilities = []
        forms = soup.find_all('form')
        for form in forms:
            action = form.get('action', '').lower()
            if action.startswith('http://'):
                vulnerabilities.append({
                    'title': 'Insecure Form Submission',
                    'description': 'Form is submitting data over HTTP, which is insecure.',
                    'risk_level': 'High'
                })
        return vulnerabilities

    def _check_mixed_content(self, soup, url):
        """
        Check for mixed content (HTTP resources on an HTTPS page).
        """
        vulnerabilities = []
        if url.startswith('https://'):
            for tag in soup.find_all(['img', 'script', 'link']):
                src = tag.get('src', '') or tag.get('href', '')
                if src.startswith('http://'):
                    vulnerabilities.append({
                        'title': 'Mixed Content',
                        'description': 'HTTP resource loaded on an HTTPS page.',
                        'risk_level': 'Medium'
                    })
        return vulnerabilities